// <auto-generated />
using System;
using MarketPriceService.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketPriceService.DataAccess.Migrations
{
    [DbContext(typeof(MarketPriceDbContext))]
    [Migration("20250704151320_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.GicsInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndustryGroupId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<Guid>("InstrumentProfileEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("SubIndustryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentProfileEntityId")
                        .IsUnique();

                    b.ToTable("GicsInfos");
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.InstrumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstrumentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LastPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TickSize")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.InstrumentMappingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DefaultOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("InstrumentEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaxOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentEntityId");

                    b.ToTable("InstrumentMappings");
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.InstrumentProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstrumentEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentEntityId")
                        .IsUnique();

                    b.ToTable("InstrumentProfiles");
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.TradingHoursEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ElectronicEnd")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ElectronicStart")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegularEnd")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegularStart")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TradingHours");
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.GicsInfoEntity", b =>
                {
                    b.HasOne("MarketPriceService.DataAccess.Entities.InstrumentProfileEntity", "Profile")
                        .WithOne("Gics")
                        .HasForeignKey("MarketPriceService.DataAccess.Entities.GicsInfoEntity", "InstrumentProfileEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.InstrumentMappingEntity", b =>
                {
                    b.HasOne("MarketPriceService.DataAccess.Entities.InstrumentEntity", "Instrument")
                        .WithMany("Mappings")
                        .HasForeignKey("InstrumentEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.InstrumentProfileEntity", b =>
                {
                    b.HasOne("MarketPriceService.DataAccess.Entities.InstrumentEntity", "Instrument")
                        .WithOne("Profile")
                        .HasForeignKey("MarketPriceService.DataAccess.Entities.InstrumentProfileEntity", "InstrumentEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.TradingHoursEntity", b =>
                {
                    b.HasOne("MarketPriceService.DataAccess.Entities.InstrumentMappingEntity", null)
                        .WithOne("TradingHours")
                        .HasForeignKey("MarketPriceService.DataAccess.Entities.TradingHoursEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.InstrumentEntity", b =>
                {
                    b.Navigation("Mappings");

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.InstrumentMappingEntity", b =>
                {
                    b.Navigation("TradingHours")
                        .IsRequired();
                });

            modelBuilder.Entity("MarketPriceService.DataAccess.Entities.InstrumentProfileEntity", b =>
                {
                    b.Navigation("Gics")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
